/*
 * generated by Xtext 2.12.0
 */
package m1ice.serializer;

import com.google.inject.Inject;
import java.util.Set;
import m1ice.services.SpotifyRequetorGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import spotify_Requetor.Album;
import spotify_Requetor.Artist;
import spotify_Requetor.CommandManager;
import spotify_Requetor.Playlist;
import spotify_Requetor.Search;
import spotify_Requetor.Show;
import spotify_Requetor.Spotify_RequetorPackage;
import spotify_Requetor.Track;

@SuppressWarnings("all")
public class SpotifyRequetorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SpotifyRequetorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Spotify_RequetorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Spotify_RequetorPackage.ALBUM:
				sequence_Album(context, (Album) semanticObject); 
				return; 
			case Spotify_RequetorPackage.ARTIST:
				sequence_Artist(context, (Artist) semanticObject); 
				return; 
			case Spotify_RequetorPackage.COMMAND_MANAGER:
				sequence_CommandManager(context, (CommandManager) semanticObject); 
				return; 
			case Spotify_RequetorPackage.PLAYLIST:
				sequence_Playlist(context, (Playlist) semanticObject); 
				return; 
			case Spotify_RequetorPackage.SEARCH:
				sequence_Search(context, (Search) semanticObject); 
				return; 
			case Spotify_RequetorPackage.SHOW:
				sequence_Show(context, (Show) semanticObject); 
				return; 
			case Spotify_RequetorPackage.TRACK:
				sequence_Track(context, (Track) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns Album
	 *     Album returns Album
	 *
	 * Constraint:
	 *     target=EString
	 */
	protected void sequence_Album(ISerializationContext context, Album semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlbumAccess().getTargetEStringParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Artist
	 *     Artist returns Artist
	 *
	 * Constraint:
	 *     target=EString
	 */
	protected void sequence_Artist(ISerializationContext context, Artist semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArtistAccess().getTargetEStringParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommandManager returns CommandManager
	 *
	 * Constraint:
	 *     commandmanager=Command?
	 */
	protected void sequence_CommandManager(ISerializationContext context, CommandManager semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Playlist
	 *     Playlist returns Playlist
	 *
	 * Constraint:
	 *     target=EString
	 */
	protected void sequence_Playlist(ISerializationContext context, Playlist semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlaylistAccess().getTargetEStringParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Search
	 *     Search returns Search
	 *
	 * Constraint:
	 *     type=[Type|EString]
	 */
	protected void sequence_Search(ISerializationContext context, Search semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Spotify_RequetorPackage.Literals.SEARCH__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Spotify_RequetorPackage.Literals.SEARCH__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSearchAccess().getTypeTypeEStringParserRuleCall_1_0_1(), semanticObject.eGet(Spotify_RequetorPackage.Literals.SEARCH__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Show
	 *     Show returns Show
	 *
	 * Constraint:
	 *     type=[Type|EString]
	 */
	protected void sequence_Show(ISerializationContext context, Show semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Spotify_RequetorPackage.Literals.SHOW__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Spotify_RequetorPackage.Literals.SHOW__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShowAccess().getTypeTypeEStringParserRuleCall_1_0_1(), semanticObject.eGet(Spotify_RequetorPackage.Literals.SHOW__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Track
	 *     Track returns Track
	 *
	 * Constraint:
	 *     target=EString
	 */
	protected void sequence_Track(ISerializationContext context, Track semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Spotify_RequetorPackage.Literals.TYPE__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrackAccess().getTargetEStringParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
}
