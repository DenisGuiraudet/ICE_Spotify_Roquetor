/*
 * generated by Xtext 2.12.0
 */
package m1ice.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpotifyRequetorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CommandManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.CommandManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandManagerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommandmanagerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandmanagerCommandParserRuleCall_1_0 = (RuleCall)cCommandmanagerAssignment_1.eContents().get(0);
		
		//CommandManager:
		//	{CommandManager} commandmanager=Command?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CommandManager} commandmanager=Command?
		public Group getGroup() { return cGroup; }
		
		//{CommandManager}
		public Action getCommandManagerAction_0() { return cCommandManagerAction_0; }
		
		//commandmanager=Command?
		public Assignment getCommandmanagerAssignment_1() { return cCommandmanagerAssignment_1; }
		
		//Command
		public RuleCall getCommandmanagerCommandParserRuleCall_1_0() { return cCommandmanagerCommandParserRuleCall_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSearchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//	Search | Show;
		@Override public ParserRule getRule() { return rule; }
		
		//Search | Show
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Search
		public RuleCall getSearchParserRuleCall_0() { return cSearchParserRuleCall_0; }
		
		//Show
		public RuleCall getShowParserRuleCall_1() { return cShowParserRuleCall_1; }
	}
	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Search");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		
		//Search:
		//	'search' type=[Type|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'search' type=[Type|EString]
		public Group getGroup() { return cGroup; }
		
		//'search'
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }
		
		//type=[Type|EString]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type|EString]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_0_1() { return cTypeTypeEStringParserRuleCall_1_0_1; }
	}
	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		
		//Show:
		//	'show' type=[Type|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'show' type=[Type|EString]
		public Group getGroup() { return cGroup; }
		
		//'show'
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }
		
		//type=[Type|EString]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type|EString]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_0_1() { return cTypeTypeEStringParserRuleCall_1_0_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArtistParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlbumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTrackParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlaylistParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	Artist | Album | Track | Playlist;
		@Override public ParserRule getRule() { return rule; }
		
		//Artist | Album | Track | Playlist
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Artist
		public RuleCall getArtistParserRuleCall_0() { return cArtistParserRuleCall_0; }
		
		//Album
		public RuleCall getAlbumParserRuleCall_1() { return cAlbumParserRuleCall_1; }
		
		//Track
		public RuleCall getTrackParserRuleCall_2() { return cTrackParserRuleCall_2; }
		
		//Playlist
		public RuleCall getPlaylistParserRuleCall_3() { return cPlaylistParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ArtistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Artist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArtistAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEStringParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Artist:
		//	{Artist} target=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Artist} target=EString
		public Group getGroup() { return cGroup; }
		
		//{Artist}
		public Action getArtistAction_0() { return cArtistAction_0; }
		
		//target=EString
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_1_0() { return cTargetEStringParserRuleCall_1_0; }
	}
	public class AlbumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Album");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlbumAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEStringParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Album:
		//	{Album} target=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Album} target=EString
		public Group getGroup() { return cGroup; }
		
		//{Album}
		public Action getAlbumAction_0() { return cAlbumAction_0; }
		
		//target=EString
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_1_0() { return cTargetEStringParserRuleCall_1_0; }
	}
	public class TrackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Track");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrackAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEStringParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Track:
		//	{Track} target=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Track} target=EString
		public Group getGroup() { return cGroup; }
		
		//{Track}
		public Action getTrackAction_0() { return cTrackAction_0; }
		
		//target=EString
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_1_0() { return cTargetEStringParserRuleCall_1_0; }
	}
	public class PlaylistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.SpotifyRequetor.Playlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlaylistAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEStringParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Playlist:
		//	{Playlist} target=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Playlist} target=EString
		public Group getGroup() { return cGroup; }
		
		//{Playlist}
		public Action getPlaylistAction_0() { return cPlaylistAction_0; }
		
		//target=EString
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_1_0() { return cTargetEStringParserRuleCall_1_0; }
	}
	
	
	private final CommandManagerElements pCommandManager;
	private final CommandElements pCommand;
	private final SearchElements pSearch;
	private final ShowElements pShow;
	private final TypeElements pType;
	private final EStringElements pEString;
	private final ArtistElements pArtist;
	private final AlbumElements pAlbum;
	private final TrackElements pTrack;
	private final PlaylistElements pPlaylist;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpotifyRequetorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCommandManager = new CommandManagerElements();
		this.pCommand = new CommandElements();
		this.pSearch = new SearchElements();
		this.pShow = new ShowElements();
		this.pType = new TypeElements();
		this.pEString = new EStringElements();
		this.pArtist = new ArtistElements();
		this.pAlbum = new AlbumElements();
		this.pTrack = new TrackElements();
		this.pPlaylist = new PlaylistElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m1ice.SpotifyRequetor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CommandManager:
	//	{CommandManager} commandmanager=Command?;
	public CommandManagerElements getCommandManagerAccess() {
		return pCommandManager;
	}
	
	public ParserRule getCommandManagerRule() {
		return getCommandManagerAccess().getRule();
	}
	
	//Command:
	//	Search | Show;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Search:
	//	'search' type=[Type|EString];
	public SearchElements getSearchAccess() {
		return pSearch;
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}
	
	//Show:
	//	'show' type=[Type|EString];
	public ShowElements getShowAccess() {
		return pShow;
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}
	
	//Type:
	//	Artist | Album | Track | Playlist;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Artist:
	//	{Artist} target=EString;
	public ArtistElements getArtistAccess() {
		return pArtist;
	}
	
	public ParserRule getArtistRule() {
		return getArtistAccess().getRule();
	}
	
	//Album:
	//	{Album} target=EString;
	public AlbumElements getAlbumAccess() {
		return pAlbum;
	}
	
	public ParserRule getAlbumRule() {
		return getAlbumAccess().getRule();
	}
	
	//Track:
	//	{Track} target=EString;
	public TrackElements getTrackAccess() {
		return pTrack;
	}
	
	public ParserRule getTrackRule() {
		return getTrackAccess().getRule();
	}
	
	//Playlist:
	//	{Playlist} target=EString;
	public PlaylistElements getPlaylistAccess() {
		return pPlaylist;
	}
	
	public ParserRule getPlaylistRule() {
		return getPlaylistAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
