/*
 * generated by Xtext 2.12.0
 */
package m1ice.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import m1ice.ide.contentassist.antlr.internal.InternalSpotifyRequetorParser;
import m1ice.services.SpotifyRequetorGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SpotifyRequetorParser extends AbstractContentAssistParser {

	@Inject
	private SpotifyRequetorGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSpotifyRequetorParser createParser() {
		InternalSpotifyRequetorParser result = new InternalSpotifyRequetorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getCommandManagerAccess().getGroup(), "rule__CommandManager__Group__0");
					put(grammarAccess.getSearchAccess().getGroup(), "rule__Search__Group__0");
					put(grammarAccess.getShowAccess().getGroup(), "rule__Show__Group__0");
					put(grammarAccess.getArtistAccess().getGroup(), "rule__Artist__Group__0");
					put(grammarAccess.getAlbumAccess().getGroup(), "rule__Album__Group__0");
					put(grammarAccess.getTrackAccess().getGroup(), "rule__Track__Group__0");
					put(grammarAccess.getPlaylistAccess().getGroup(), "rule__Playlist__Group__0");
					put(grammarAccess.getCommandManagerAccess().getCommandmanagerAssignment_1(), "rule__CommandManager__CommandmanagerAssignment_1");
					put(grammarAccess.getSearchAccess().getTypeAssignment_1(), "rule__Search__TypeAssignment_1");
					put(grammarAccess.getShowAccess().getTypeAssignment_1(), "rule__Show__TypeAssignment_1");
					put(grammarAccess.getArtistAccess().getTargetAssignment_1(), "rule__Artist__TargetAssignment_1");
					put(grammarAccess.getAlbumAccess().getTargetAssignment_1(), "rule__Album__TargetAssignment_1");
					put(grammarAccess.getTrackAccess().getTargetAssignment_1(), "rule__Track__TargetAssignment_1");
					put(grammarAccess.getPlaylistAccess().getTargetAssignment_1(), "rule__Playlist__TargetAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpotifyRequetorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpotifyRequetorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
